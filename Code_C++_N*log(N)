class Solution {
public:
    int floor(int target,vector<int>&v)
    {  int l=0,r=v.size()-1;
       int res=-1;
       while(l<=r)
       {  int m=(l+r)/2;
          if(v[m]==target)
              return m;
          if(v[m]<target)
          {  res=m;
             l=m+1;
          }
         else
            r=m-1;   
       }
       return res;
    }
    int minSubArrayLen(int target, vector<int>& v) {
        vector<int>m;
        int res=INT_MAX,sum=0,n=v.size();
        for(int i=0;i<n;++i)
        {  sum=sum+v[i];
           m.push_back(sum);
           if(sum-target>0)
           {  res=min(res,(i-floor(sum-target,m))); }
           else if(sum==target)
               res=min(res,i+1);
        }
        if(res==INT_MAX)
            return 0;
        return res;
    }
};
